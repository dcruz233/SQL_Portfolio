-- PRACTICE QUESTIONS FROM www.sql-easy.com --


-- Lesson 1: SELECT *
SELECT *
FROM family_members;

-- Lesson 2: SELECT specific columns
SELECT name, species
FROM family_members;

-- Lesson 3: WHERE ... Equals
SELECT *
FROM family_members
WHERE species = 'dog';

-- Lesson 4: WHERE ... Greater than
SELECT * 
FROM family_members
WHERE num_books_read > 190;

-- Lesson 5: WHERE ... Greater than or equal
SELECT * 
FROM family_members
WHERE num_books_read >=180;

-- Lesson 6: AND
SELECT *
FROM friends_of_pickles
WHERE species = 'dog'
AND height_cm < 45;

-- Lesson 7: OR
SELECT * 
FROM friends_of_pickles
WHERE species = 'dog' 
OR height_cm < 45;

-- Lesson 8: IN
SELECT *
FROM friends_of_pickles
WHERE species
NOT IN ('cat', 'dog');

-- Lesson 9: DISTINCT
SELECT DISTINCT species
FROM friends_of_pickles
WHERE height_cm > 50;

-- Lesson 10: ORDER BY
SELECT *
FROM friends_of_pickles
ORDER BY height_cm DESC;

-- Lesson 11: LIMIT # of returned rows
SELECT *
FROM friends_of_pickles
ORDER BY height_cm DESC
LIMIT 1;

-- Lesson 12: COUNT(*)
SELECT COUNT(*) 
FROM friends_of_pickles;

-- Lesson 13: COUNT(*) ... WHERE
SELECT COUNT(*) 
FROM friends_of_pickles
WHERE species = 'dog';

-- Lesson 14: SUM
SELECT SUM(num_books_read)
FROM family_members;

-- Lesson 15: AVG
SELECT AVG(num_books_read)
FROM family_members;

-- Lesson 16: MAX and MIN
SELECT MAX(num_books_read)
FROM family_members;

-- Lesson 17: GROUP BY
SELECT MAX(height_cm), species
FROM friends_of_pickles
GROUP BY species;

-- Lesson 18: Nested queries
SELECT * 
FROM family_members
WHERE num_books_read = (SELECT MAX(num_books_read) FROM family_members);

-- Lesson 19: NULL
SELECT * 
FROM family_members 
WHERE favorite_book IS NOT NULL;

-- Lesson 20: Date
SELECT * 
FROM celebs_born
WHERE birthdate > '1980-09-01';

-- Lesson 21: Inner joins
SELECT character.name, character_actor.actor_name
FROM character
INNER JOIN character_actor
ON character.id = character_actor.character_id;

-- Lesson 22: Multiple joins
SELECT character.name, actor.name 
FROM character 
INNER JOIN character_actor 
ON character.id = character_actor.character_id 
INNER JOIN actor 
ON character_actor.actor_id = actor.id;

-- Lesson 23: Joins with WHERE
SELECT character.name, tv_show.name
FROM character
INNER JOIN tv_show
ON character_tv_show.tv_show_id = tv_show.id
INNER JOIN character_tv_show
ON character_tv_show.character_id = character.id
WHERE tv_show.name != "How I Met Your Mother"
AND character.name != "Willow Rosenberg";

-- Lesson 24: Left joins
SELECT character.name, actor.name 
FROM character 
LEFT JOIN character_actor 
ON character.id = character_actor.character_id 
LEFT JOIN actor 
ON character_actor.actor_id = actor.id;

-- Lesson 25: Table alias
SELECT c.name, a.name
FROM character AS c
LEFT JOIN character_actor AS ca
ON ca.character_id = c.id
LEFT JOIN actor AS a
ON ca.actor_id = a.id;

-- Lesson 26: Column alias
SELECT character.name AS character, actor.name AS actor
FROM character
LEFT JOIN character_actor
ON character_actor.character_id = character.id
LEFT JOIN actor
ON character_actor.actor_id = actor.id;

-- Lesson 27: Self joins
SELECT e1.name AS employee_name, e2.name AS boss_name
FROM employees AS e1
INNER JOIN employees AS e2
ON e1.boss_id = e2.id;

-- Lesson 28: LIKE


-- Lesson 29: CASE


-- Lesson 30: SUBSTR


-- Lesson 31: COALESCE


